{"hierarchy":{"paths":[["doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent"]]},"schemaVersion":{"minor":2,"major":0,"patch":0},"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/WorkflowInput","doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/WorkflowOutput"]},{"title":"Initializers","identifiers":["doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/init()-56lx8","doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/init(with:)-9mets"]},{"title":"Instance Properties","identifiers":["doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/workflow"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/backUpInWorkflow()","doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/proceedInWorkflow()","doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/proceedInWorkflow(_:)-789iw","doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/proceedInWorkflow(_:)-93qui","doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/shouldLoad()-cmx5"]}],"identifier":{"url":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"type":"text","text":"A component in a "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":"; should be independent of the workflow context."}],"relationshipsSections":[{"kind":"relationships","title":"Inherited By","identifiers":["doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/PassthroughFlowRepresentable"],"type":"inheritedBy"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlowRepresentable"}]}]},{"kind":"content","content":[{"level":3,"anchor":"Discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"It’s important to make sure your "},{"code":"FlowRepresentable","type":"codeVoice"},{"type":"text","text":" is not dependent on other "},{"code":"FlowRepresentable","type":"codeVoice"},{"type":"text","text":"s."},{"type":"text","text":" "},{"type":"text","text":"It’s okay to specify that a certain kind of data needs to be passed in and passed out, but keep your "},{"code":"FlowRepresentable","type":"codeVoice"},{"type":"text","text":" from knowing what came before, or what’s likely to come after."},{"type":"text","text":" "},{"type":"text","text":"In that way you’ll end up with pieces of a workflow that can be moved or put into multiple places with ease."}],"type":"paragraph"},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"text":"Declare an ","type":"text"},{"inlineContent":[{"type":"text","text":"input"}],"type":"strong"},{"text":" type of ","type":"text"},{"type":"codeVoice","code":"Never"},{"text":" when the ","type":"text"},{"type":"codeVoice","code":"FlowRepresentable"},{"text":" will ignore data passed in from the ","type":"text"},{"type":"codeVoice","code":"Workflow"},{"text":".  An ","type":"text"},{"inlineContent":[{"type":"text","text":"output"}],"type":"strong"},{"text":" type of ","type":"text"},{"type":"codeVoice","code":"Never"},{"text":" means data will not be passed forward.","type":"text"}]}],"type":"aside"},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"_workflowPointer","type":"codeVoice"},{"text":" has to be declared as a property on the type conforming to ","type":"text"},{"code":"FlowRepresentable","type":"codeVoice"},{"text":" but it is set by the ","type":"text"},{"code":"Workflow","type":"codeVoice"},{"text":", and should not be set by anything else.","type":"text"}]}],"type":"aside"},{"style":"important","content":[{"inlineContent":[{"type":"text","text":"If you create a superclass that is a "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" and expect subclasses to be able to define their own methods, such as "},{"type":"codeVoice","code":"shouldLoad"},{"type":"text","text":", the superclass should declare those methods, and the subclasses should override them. Otherwise you will find the subclasses do not behave as expected."}],"type":"paragraph"}],"type":"aside"},{"level":4,"anchor":"Example","text":"Example","type":"heading"},{"inlineContent":[{"text":"A ","type":"text"},{"code":"FlowRepresentable","type":"codeVoice"},{"text":" with a ","type":"text"},{"code":"WorkflowInput","type":"codeVoice"},{"text":" of ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" and a ","type":"text"},{"code":"WorkflowOutput","type":"codeVoice"},{"text":" of ","type":"text"},{"code":"Never","type":"codeVoice"}],"type":"paragraph"},{"syntax":"swift","code":["class FR1: FlowRepresentable { \/\/ Mark this class as `final` to avoid the required keyword on init","   weak var _workflowPointer: AnyFlowRepresentable?","   required init(with name: String) { }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" with a "},{"type":"codeVoice","code":"WorkflowInput"},{"type":"text","text":" of "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"WorkflowOutput"},{"type":"text","text":" of "},{"type":"codeVoice","code":"Never"}],"type":"paragraph"},{"syntax":"swift","code":["final class FR1: FlowRepresentable { \/\/ Classes synthesize an empty initializer already, you are good!","   weak var _workflowPointer: AnyFlowRepresentable?","}"],"type":"codeListing"},{"level":4,"anchor":"Note","text":"Note","type":"heading"},{"inlineContent":[{"type":"text","text":"Declaring your own custom initializer can result in a compiler error with an unfriendly message."}],"type":"paragraph"},{"syntax":"swift","code":["class FR1: FlowRepresentable { \/\/ Results in compiler error for 'init()' being unavailable","   weak var _workflowPointer: AnyFlowRepresentable?","   init(myCustomInitializer property: Int) { }","   \/\/ required init() { } \/\/ declare your own init() to satisfy the protocol requirements and handle the compiler error","}"],"type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/swiftcurrent\/flowrepresentable"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"symbolKind":"protocol","title":"FlowRepresentable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlowRepresentable"}],"modules":[{"name":"SwiftCurrent"}],"navigatorTitle":[{"kind":"identifier","text":"FlowRepresentable"}],"role":"symbol","roleHeading":"Protocol","externalID":"s:12SwiftCurrent17FlowRepresentableP"},"references":{"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent":{"type":"topic","url":"\/documentation\/swiftcurrent","identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent","role":"collection","title":"SwiftCurrent","abstract":[],"kind":"symbol"},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable/proceedInWorkflow(_:)-93qui":{"abstract":[{"type":"text","text":"Moves forward while passing arguments forward in the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":"; if at the end, calls the "},{"type":"codeVoice","code":"onFinish"},{"type":"text","text":" closure used when launching the workflow."}],"title":"proceedInWorkflow(_:)","url":"\/documentation\/swiftcurrent\/flowrepresentable\/proceedinworkflow(_:)-93qui","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"proceedInWorkflow","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"WorkflowOutput","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/proceedInWorkflow(_:)-93qui","role":"symbol"},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable/proceedInWorkflow(_:)-789iw":{"kind":"symbol","identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/proceedInWorkflow(_:)-789iw","url":"\/documentation\/swiftcurrent\/flowrepresentable\/proceedinworkflow(_:)-789iw","title":"proceedInWorkflow(_:)","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"proceedInWorkflow","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"WorkflowOutput","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Moves forward while passing arguments forward in the ","type":"text"},{"code":"Workflow","type":"codeVoice"},{"text":"; if at the end, calls the ","type":"text"},{"code":"onFinish","type":"codeVoice"},{"text":" closure used when launching the workflow.","type":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"WorkflowOutput","type":"codeVoice"},{"type":"text","text":" is "},{"code":"AnyWorkflow.PassedArgs","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable":{"title":"FlowRepresentable","type":"topic","identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable","navigatorTitle":[{"kind":"identifier","text":"FlowRepresentable"}],"abstract":[{"type":"text","text":"A component in a "},{"code":"Workflow","type":"codeVoice"},{"type":"text","text":"; should be independent of the workflow context."}],"url":"\/documentation\/swiftcurrent\/flowrepresentable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlowRepresentable"}],"kind":"symbol"},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable/init()-56lx8":{"fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/init()-56lx8","defaultImplementations":2,"role":"symbol","abstract":[{"text":"Creates a ","type":"text"},{"type":"codeVoice","code":"FlowRepresentable"},{"text":".","type":"text"}],"url":"\/documentation\/swiftcurrent\/flowrepresentable\/init()-56lx8","required":true,"title":"init()","kind":"symbol"},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable/init(with:)-9mets":{"type":"topic","identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/init(with:)-9mets","kind":"symbol","url":"\/documentation\/swiftcurrent\/flowrepresentable\/init(with:)-9mets","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"WorkflowInput","kind":"typeIdentifier"},{"text":")","kind":"text"}],"required":true,"title":"init(with:)","defaultImplementations":2,"abstract":[{"type":"text","text":"Creates a "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" with the specified "},{"type":"codeVoice","code":"WorkflowInput"},{"type":"text","text":"."}]},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable/backUpInWorkflow()":{"role":"symbol","title":"backUpInWorkflow()","abstract":[{"type":"text","text":"Backs up in the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"backUpInWorkflow"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"}],"url":"\/documentation\/swiftcurrent\/flowrepresentable\/backupinworkflow()","kind":"symbol","type":"topic","identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/backUpInWorkflow()"},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/PassthroughFlowRepresentable":{"url":"\/documentation\/swiftcurrent\/passthroughflowrepresentable","kind":"symbol","title":"PassthroughFlowRepresentable","navigatorTitle":[{"kind":"identifier","text":"PassthroughFlowRepresentable"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PassthroughFlowRepresentable"}],"role":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":" that automatically captures data from the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":" and passes it forward."}],"identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/PassthroughFlowRepresentable"},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable/WorkflowOutput":{"role":"symbol","required":true,"title":"WorkflowOutput","abstract":[{"type":"text","text":"The type of data passed forward from the "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":"; defaulted to "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"; "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" means data will not be passed forward."}],"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"WorkflowOutput"},{"kind":"text","text":" = "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"}],"url":"\/documentation\/swiftcurrent\/flowrepresentable\/workflowoutput","kind":"symbol","type":"topic","identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/WorkflowOutput"},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable/proceedInWorkflow()":{"kind":"symbol","title":"proceedInWorkflow()","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"proceedInWorkflow"},{"kind":"text","text":"()"}],"type":"topic","url":"\/documentation\/swiftcurrent\/flowrepresentable\/proceedinworkflow()","abstract":[{"type":"text","text":"Moves forward in the "},{"code":"Workflow","type":"codeVoice"},{"type":"text","text":"; if at the end, calls the "},{"code":"onFinish","type":"codeVoice"},{"type":"text","text":" closure used when launching the workflow."}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"WorkflowOutput"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/proceedInWorkflow()"},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable/WorkflowInput":{"type":"topic","required":true,"url":"\/documentation\/swiftcurrent\/flowrepresentable\/workflowinput","role":"symbol","identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/WorkflowInput","title":"WorkflowInput","abstract":[{"text":"The type of data coming into the ","type":"text"},{"code":"FlowRepresentable","type":"codeVoice"},{"text":"; defaulted to ","type":"text"},{"code":"Never","type":"codeVoice"},{"text":"; ","type":"text"},{"code":"Never","type":"codeVoice"},{"text":"means the ","type":"text"},{"code":"FlowRepresentable","type":"codeVoice"},{"text":" will ignore data passed in from the ","type":"text"},{"code":"Workflow","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WorkflowInput","kind":"identifier"},{"text":" = ","kind":"text"},{"text":"Never","preciseIdentifier":"s:s5NeverO","kind":"typeIdentifier"}],"kind":"symbol"},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable/workflow":{"identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/workflow","abstract":[{"type":"text","text":"Access to the "},{"type":"codeVoice","code":"AnyWorkflow"},{"type":"text","text":" controlling the "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol","title":"workflow","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"workflow"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyWorkflow","preciseIdentifier":"s:12SwiftCurrent11AnyWorkflowC"},{"kind":"text","text":"?"}],"type":"topic","url":"\/documentation\/swiftcurrent\/flowrepresentable\/workflow"},"doc://com.wwt.SwiftCurrent/documentation/SwiftCurrent/FlowRepresentable/shouldLoad()-cmx5":{"type":"topic","identifier":"doc:\/\/com.wwt.SwiftCurrent\/documentation\/SwiftCurrent\/FlowRepresentable\/shouldLoad()-cmx5","kind":"symbol","url":"\/documentation\/swiftcurrent\/flowrepresentable\/shouldload()-cmx5","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shouldLoad","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"required":true,"title":"shouldLoad()","defaultImplementations":1,"abstract":[{"type":"text","text":"Returns a Boolean indicating the "},{"type":"codeVoice","code":"Workflow"},{"type":"text","text":" should load the "},{"type":"codeVoice","code":"FlowRepresentable"},{"type":"text","text":"; defaults to "},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}]}}}